# -*- coding: utf-8 -*-
"""Bartlett.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nMOG7jzuvGNGoWKcwzBLfM_eOej-CAgv

Importando bibliotecas
---
"""

import numpy as np
import pandas as pd

from scipy.stats import *
from math import sqrt
from matplotlib import pyplot as plt

valoresCriticosShapiro = pd.read_csv("valoresCriticosShapiro.csv")
valoresCriticosShapiro

p_mensal_avioes = pd.read_csv("p_mensal_avioes.csv")
p_mensal_avioes

maquinaAgric2 = pd.read_csv("maquinaAgric2.csv")
maquinaAgric2

TabelaG = pd.read_csv("TabelaG.csv")
TabelaG

coeficientesShapiro = pd.read_csv("coeficientesShapiro.csv")
coeficientesShapiro

TabelaH2 = pd.read_csv("TabelaH2.csv")
TabelaH2

TabelaH1 = pd.read_csv("TabelaH1.csv")
TabelaH1

ValoresCriticosdeD = pd.read_csv("ValoresCriticosdeD.csv")
ValoresCriticosdeD

maquinaAgric2 = pd.read_csv("maquinaAgric2.csv")
maquinaAgric2

"""## Histograma Simples e Comparativo"""

def HistogramaSimples(data):

    plt.hist(data, bins=20, color='Purple', edgecolor='black')
    plt.title('Distribuição de Dados')
    plt.xlabel('Valores')
    plt.ylabel('Frequência')
    plt.grid(True)
    plt.show()

def HistogramaComparativo(data):

    #data é um array de arrays

    plt.figure(figsize=(10,5))
    plt.title('Distribuição de Dados')
    plt.xlabel('Valores')
    plt.ylabel('Frequência')
    plt.grid(True)

    for i in range(len(data)):
        plt.hist(data[i], bins=20, color='Purple', edgecolor='black', alpha=0.5)

"""##  KOLMOGOROV-SMIRNOV"""

def KolmogorovSmirnov(rol, alpha, tamanho, graf=True):
    """
    Função para realizar o teste de Kolmogorov-Smirnov.

    Parâmetros:
        rol (array): Array de dados.
        alpha (float): Nível de significância.
        tamanho (int): Tamanho da amostra.
        graf (bool, opcional): Indica se deve exibir gráficos e informações. Padrão é True.

    Retorna:
        bool: True se a hipótese nula é aceita, False caso contrário.
    """

    print('\nKolmogorov-Smirnov\n')

    # H0 = Fobs(x) = Fesp(x)
    # H1 = Fobs(x) != Fesp(x)

    # Dcalc = max{|Fesp(x) - Fob(x)|,|fsp(x) - Fob(x-1)|}
    # Fesp = Frequencia relativa
    # Fob = Frequencia relativa acumulada
    Media = rol.mean()
    Variancia = rol.var()
    DesvioPadrao = rol.std()
    mediana = np.median(rol)
    min = rol.min()
    maximum = rol.max()
    soma = rol.sum()

    if graf:
        HistogramaSimples(rol)
        print('Media = ', Media)
        print('Variancia = ', Variancia)
        print('DesvioPadrao = ', DesvioPadrao)
        print("Mediana = ", mediana)
        print("Minimo = ", min)
        print("Maximo = ", maximum)
        print("Soma = ", soma)
        print("Contagem = ", tamanho)

    if tamanho <= 20:

        import pandas as pd
        Tabela = pd.DataFrame(columns=['xi','Fobs','Fa','Fra','zcalc','fesp','|fesp(xi) - fra(xi)|','|fesp(xi) - fra(xi-1)|'])

        tabG = {'0.20':1.07/sqrt(tamanho),'0.15':1.14/sqrt(tamanho),'0.10':1.22/sqrt(tamanho),'0.05':1.36/sqrt(tamanho),'0.025':1.48/sqrt(tamanho),'0.01':1.63/sqrt(tamanho),'0.005':1.73/sqrt(tamanho)}

        Tabela['xi'], Tabela['Fobs'] = np.unique(rol, return_counts=True)
        Tabela['Fa'] = Tabela['Fobs'].cumsum()
        Tabela['Fra'] = Tabela['Fa']/Tabela['Fobs'].sum() # Frequencia relativa acumulada --> Fob.sum = tamanho da rol
        Tabela['zcalc'] = (Tabela['xi'] - Media)/DesvioPadrao
        Tabela['fesp'] = norm.cdf(Tabela['zcalc'])
        Tabela['|fesp(xi) - fra(xi)|'] = abs(Tabela['fesp'] - Tabela['Fra'])
        Tabela['|fesp(xi) - fra(xi-1)|'] = abs(Tabela['fesp'] - Tabela['Fra'].shift(1))
        # Adicionando o primeiro item na coluna |fesp(xi) - fra(xi-1)|
        Tabela.loc[0,'|fesp(xi) - fra(xi-1)|'] = abs(Tabela.loc[0,'fesp'] - 0)

        # Dcalc = Maximo de |fesp(xi) - fra(xi)| e |fesp(xi) - fra(xi-1)|
        Dcalc = max(abs(Tabela['|fesp(xi) - fra(xi)|'].max()), abs(Tabela['|fesp(xi) - fra(xi-1)|'].max()))
        # Usar p-valores (Distribuição Normal inversa e verifica se p-valor >= alpha) ->  Hipotese H1,casso contrario H0

        # Dtab = TabelaG.loc[tamanho-1,alpha]
        Dtab = TabelaG.loc[tamanho-1, str(alpha)]

        if graf:
            Tabela

        # Se Dcalc < Dtab --> Aceita H0
        if Dcalc < Dtab:
            print('\nDcalc < Dtab --> Aceita H0')
            return True

        # Caso contrario --> Rejeita H0
        else:
            print('\nDcalc > Dtab --> Rejeita H0')
            return False

    else:
        # statistica, p_valor = kstest(rol, 'norm', args=(Media,DesvioPadrao))
        statistica, p_valor = shapiro(rol)

        if p_valor >= alpha:
            print('p-valor = ', p_valor)
            print('p-valor >= alpha --> Aceita H0')
            return True

        else:
            print('p-valor = ', p_valor)
            print('p-valor < alpha --> Rejeita H0')
            return False

"""Testes"""

# Casos de teste

#Ct001  - KS -> teste com sucesso
ProdBienalAvioes = np.array([15, 16, 18, 19, 20, 22, 23, 23, 24, 24, 25, 28, 28, 29, 30, 30, 31, 32, 32, 34, 36, 36, 39, 46])
#Ct002  - KS -> teste com sucesso
Mi = 30
sigma = 5
Normal = np.random.normal(Mi,sigma,20)
#ct003 - kks --> Teste de falha
gama = np.random.gamma(2,2,20)
#ct004 - KS --> Teste de falha
cauchy = np.random.standard_cauchy(20)

KolmogorovSmirnov(ProdBienalAvioes,0.05,24)

"""O p-valor (0.8565) é maior do que o nível de significância (α = 0.05). Isso significa que não temos evidências estatisticamente significativas para rejeitar a hipótese nula.
Portanto, com base na análise estatística, podemos concluir que os dados não fornecem evidências suficientes para sugerir que a distribuição dos dados não seja normal.
"""

KolmogorovSmirnov(Normal,0.05,50)

KolmogorovSmirnov(gama,0.05,500)

KolmogorovSmirnov(cauchy,0.05,50)

"""## SHAPIRO-WILK"""

def ShapiroWilk(rol, alpha, tamanho):
    """
    Função para realizar o teste de Shapiro-Wilk.

    Parâmetros:
        rol (array): Array de dados.
        alpha (float): Nível de significância.
        tamanho (int): Tamanho da amostra.

    Retorna:
        bool: True se a hipótese nula é aceita, False caso contrário.
    """
    print('\nShapiro-Wilk\n')
    print("\nHipotese:\n")
    print("H0 = A amostra segue uma distribuição normal")
    print("H1 = A amostra não segue uma distribuição normal")

    Media = rol.mean()
    Variancia = rol.var()
    DesvioPadrao = rol.std()
    mediana = np.median(rol)
    max = rol.max()
    min = rol.min()
    soma = rol.sum()

    print('Media = ', Media)
    print('Variancia = ', Variancia)
    print('DesvioPadrao = ', DesvioPadrao)
    print("Mediana = ", mediana)
    print("Minimo = ", min)
    print("Maximo = ", max)
    print("Soma = ", soma)
    print("Contagem = ", tamanho)

    HistogramaSimples(rol)

    if tamanho <= 30:
        Tabela = pd.DataFrame(columns=['i','n-(i-1)','ain','xn-(i-1)','xi','ain(xn-(i-1)-xi'])

        Tabela['i'] = np.arange(1,(tamanho+1)/2)
        Tabela['n-(i-1)'] = tamanho - Tabela['i'] + 1
        Tabela['ain'] = TabelaH1.loc[tamanho-1].values[~np.isnan(TabelaH1.loc[tamanho-1].values)] #Solução Elegante -> usei masks para remover os NaN
        Tabela['xn-(i-1)'] = rol[Tabela['n-(i-1)'].astype(int)-1]
        Tabela['xi'] = rol[Tabela['i'].astype(int)-1]
        Tabela['ain(xn-(i-1)-xi'] = Tabela['ain']*(Tabela['xn-(i-1)']-Tabela['xi'])

        #b = somatorio de ain(xn-(i-1)-xi) (1,n/2)
        #wcalc= b² / Somatório de (xi - x|)²

        b = Tabela['ain(xn-(i-1)-xi'].sum()
        Wcalc = (b**2)/((rol - Media)**2).sum()
        Wc = TabelaH2.loc[tamanho-3, str(alpha)]

        print('\nTabela')
        Tabela
        print('\n')

        print('Wcalc = ', Wcalc)
        print('Wc = ', Wc)

        if Wcalc >=  Wc:
            print('\nWcalc >= Wc --> Aceita H0')
            return True
        else:
            print('\nWcalc < Wc --> Rejeita H0')
            return False

    else:
        stat, p = shapiro(rol)

        if p > alpha:
            print('\np > alpha --> Aceita H0')
            return True
        else:
            print('\np < alpha --> Rejeita H0')
            return False

"""Teste"""

# Casos de teste

#ct001 - Shapiro-Wilk --> Teste com sucesso
ProdMaqAgric = np.array([52 ,50 ,36 ,40 ,30, 42, 38, 38, 52, 44, 36, 34, 50 ,42 ,34, 55, 36, 55, 42, 52, 34, 48, 55, 44 ,44 ,30 ,48 ,40, 40, 44 ,40 ,44 ,38 ,36 ,50 ,42])
#ct002 - Shapiro-Wilk --> Teste com sucesso
Normal = np.random.normal(30,5,50)
#ct003 - Shapiro-Wilk --> Teste de falha
gama = np.random.gamma(2,2,50)
#ct004 - Shapiro-Wilk --> Teste de falha
cauchy = np.random.standard_cauchy(50)

ShapiroWilk(ProdMaqAgric,0.05,36)

ShapiroWilk(Normal,0.05,50)

ShapiroWilk(gama,0.05,50)

ShapiroWilk(cauchy,0.05,50)

"""## BARTLETT

"""

def Bartlett(rol, alpha, graf=True):
    """
    Função para realizar o teste de Bartlett.

    Parâmetros:
        rol (list): Lista de listas de dados.
        alpha (float): Nível de significância.
        graf (bool, opcional): Indica se deve exibir gráficos e informações. Padrão é True.

    Retorna:
        bool: True se a hipótese nula é aceita, False caso contrário.
    """
    print("Bartlett\n")
    print('Hipoteses:')
    print('H0 --> As variancias são iguais')
    print('H1 --> As variancias não são iguais')

    # rol = lista de listas

    N = 0
    Ni = []
    Vari = []

    for i in range(len(rol)):
        N += len(rol[i])
        Ni.append(len(rol[i]))
        Vari.append(np.var(rol[i]))

    Sp2 = np.sum((np.array(Ni)-1)*(np.array(Vari)))/(N-len(rol))

    q = (N-len(rol))*np.log(Sp2) - np.sum((np.array(Ni)-1)*np.log(np.array(Vari)))
    c = 1 + (1/(3*(len(rol)-1)))*(np.sum(1/(np.array(Ni)-1))-1/(N-len(rol)))

    Bcalc = q/c

    X2c = chi2.ppf(1-alpha,len(rol)-1)

    if graf:
        HistogramaComparativo(rol)


    if Bcalc > X2c:
        print('\nBcalc > X2c --> Rejeita H0')
        return False

    else:
        print('\nBcalc <= X2c --> Aceita H0')
        return True

"""Teste"""

Normal = np.random.normal(30,5,50)
Normal2 = np.random.normal(30,5,50)

Bartlett([Normal,Normal2],0.05)

Normal = np.random.normal(30,5,50)
Normal2 = np.random.normal(30,10,50)

Bartlett([Normal,Normal2],0.05)

"""## Z SCORE"""

def Zscore(rol, alpha, M):
    """
    Função para realizar o teste de Z-Score.

    Parâmetros:
        rol (array): Array de dados.
        alpha (float): Nível de significância.
        M (float): Valor a ser testado.

    Retorna:
        bool: True se a hipótese nula é aceita, False caso contrário.
    """
    print("Z-Score\n")
    print('Hipoteses:')
    print('H0 --> M = ', M)
    print('H1 --> M != ', M)

    sigmaXb = np.std(rol, ddof=1) / np.sqrt(len(rol))
    zCalc = (np.mean(rol) - M) / sigmaXb

    """
    Os valores críticos da estatística (zc) são apresentados na Tabela E do apêndice.
    Essa tabela fornece os valores críticos de zc tal que P(Zcalc > zc) = α
    (para um teste unilateral à direita).
    """

    zc = t.ppf(1 - alpha / 2, len(rol) - 1)

    HistogramaSimples(rol)

    if abs(zCalc) > zc:
        print('\nZcalc > Zc --> Rejeita H0')
        return False
    else:
        print('\nZcalc <= Zc --> Aceita H0')
        return True

"""Teste"""

normal = np.random.normal(30,5,50)

#Caso de teste 001 - Teste com sucesso
Zscore(normal,0.05,30)

#Caso de teste 002 - Teste com sucesso
Zscore(normal,0.05,35)

"""## T STUDENT INDEPENDENTE"""

def T_student_Independente(rol1, rol2, alpha):
    """
    Função para realizar o teste T de Student para comparação de médias populacionais independentes.

    Parâmetros:
        rol1 (array): Primeiro conjunto de dados.
        rol2 (array): Segundo conjunto de dados.
        alpha (float): Nível de significância.

    Retorna:
        bool: True se a hipótese nula é aceita, False caso contrário.
    """
    print("T-Student - Comparação de médias populacionais Independentes\n")

    print('Hipoteses:')
    print('H0 --> M1 = M2 ')
    print('H1 --> M1 != M2')

    n1, n2 = len(rol1), len(rol2)
    var1, var2 = rol1.var(), rol2.var()
    mi1, mi2 = rol1.mean(), rol2.mean()
    d1, d2 = rol1.std(), rol2.std()
    max1, max2 = rol1.max(), rol2.max()
    min1, min2 = rol1.min(), rol2.min()
    soma1, soma2 = rol1.sum(), rol2.sum()

    print("Médias:", mi1, mi2)
    print("Variâncias:", var1, var2)
    print("Desvios Padrões:", d1, d2)
    print("Máximos:", max1, max2)
    print("Mínimos:", min1, min2)
    print("Somas:", soma1, soma2)
    #print("Contagens:",n1,n2)

    HistogramaComparativo([rol1, rol2])

    if Bartlett([rol1, rol2], alpha):

        print("Caso 2 --> Sigma²1 == Sigma²2\n")

        Sp = sqrt(((n1-1)*var1 + (n2-1)*var2)/n1+n2-2)
        Tcalc = (mi1-mi2)/(Sp*(1/n1 + 1/n2)**1/2)
        Tc = t.ppf(1-alpha/2,n1+n2-2)

    else:
        print("Caso 1 --> Sigma²1 != Sigma²2\n")

        Tcalc = (mi1 - mi2 )/((var1/n1)+(var2/n2))**2  # Estatistica T
        V = ((var1/n1   +  var2/n2)**2)/   ( ((var1/n1)**2)/(n1-1)  +   ((var2/n2)**2)/(n2-1))  # Graus de liberdade
        Tc = t.ppf(1-alpha/2,V)  # Valor critico

    # Verificar hipoteses

    if Tcalc >= Tc:
        print('\nTalc >= Tc --> Aceita H0')
        return True
    else:
        print('\nTalc < Tc --> Rejeita H0')
        return False

"""Teste"""

#ct001 - Sucesso Bartlett Sucesso T

t11  = np.random.normal(30,5,55)
t12 = np.random.normal(30,5,55)


#ct002 - Falha Bartlett Sucesso T

t21 = np.random.normal(30,5,25)
t22 = np.random.normal(30,15,25)


#ct003 - Sucesso Bartlett Falha T

t31 = np.random.normal(30,5,25)
t32 = np.random.normal(50,5,25)

#ct004 - Falha Bartlett Falha T

t41 = np.random.normal(30,5,25)
t42 = np.random.normal(40,1,25)

T_student_Independente(t11,t12,0.05)

T_student_Independente(t21,t22,0.05)

T_student_Independente(t31,t32,0.05)

"""## T STUDENTE EMPARELHADA"""

#ct001 - Sucesso KS Sucesso Bartlet Sucesso T

t11  = np.random.normal(30,5,50)
t12 = np.random.normal(30,5,50)

#ct003 - Sucesso KS Falha Bartlet

t31 = np.random.normal(30,5,500)
t32 = np.random.normal(30,10,500)

T_student_rols_Emparelhadas(t11,t12,0.05)

T_student_rols_Emparelhadas(t31,t32,0.05)